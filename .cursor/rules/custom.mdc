---
description: 
globs: 
alwaysApply: true
---
---

# ✅ **Project Name: TaskFlowPro Starter Kit**

*A scalable, production-ready Laravel starter application with full user authentication, admin dashboards, and superadmin controls — ideal for SaaS, internal tools, client dashboards, or marketplaces.*

---

## 🧱 OVERVIEW

This application includes:

* **Fully modular authentication system**
* **Role-based access control (RBAC) using Spatie**
* **Multi-level access: User, Admin, Superadmin**
* **Separate route files and dashboards**
* **Seeders, factories, and middleware ready to go**
* **Database schema, auditing, and permission management**
* **Clean Blade UI or optional Vue/Inertia frontend**
* **Deployment-friendly with Laravel Sail or Docker**

---

## 👥 USER ROLES AND PERMISSIONS

### 1. 👤 **Users**

Regular users who interact with the core functionality of the application.

**Permissions:**

* Register/login/logout
* Update profile and change password
* Access a personalized dashboard
* Create/read/update/delete (CRUD) their own data (e.g., tasks, projects)
* Comment or participate in discussions
* Receive notifications and alerts
* Export personal data (e.g., PDF, CSV)

---

### 2. 🛠️ **Admins**

Admins manage workspace or organization-level operations. Ideal for team leads, managers, or business owners.

**Permissions (plus all User permissions):**

* Access the admin dashboard
* Manage users within their team (create, suspend, delete)
* Assign or revoke user roles within their workspace
* Moderate content (flagging, removing)
* Access workspace-level reports and analytics
* Configure workspace settings (branding, timezone, notification rules)

---

### 3. 👑 **Superadmins**

Superadmins manage the entire platform. They have unrestricted access to all systems, including tenants, billing, and critical platform settings.

**Permissions (plus all Admin permissions):**

* Access superadmin dashboard
* Manage all workspaces and admins
* Approve or ban accounts
* Manage subscriptions (Stripe integration)
* Monitor system performance (queues, jobs, DB health)
* Control platform-wide settings and feature flags
* View audit logs and user activities

---

## 🔐 AUTHENTICATION & SECURITY FEATURES

* Laravel Breeze or Jetstream for authentication (Blade or Inertia)
* Password reset, email verification
* Two-factor authentication (2FA) for Admins and Superadmins
* Role-based middleware protection (`auth`, `role:user`, etc.)
* CSRF protection, input sanitization, and validation
* User status (active/suspended/verified)
* Brute force and rate limiting (Laravel Throttle)

---

## 🗃️ DATABASE SCHEMA (MySQL)

**Core Tables:**

| Table                   | Key Columns                                                |
| ----------------------- | ---------------------------------------------------------- |
| `users`                 | `id`, `name`, `email`, `password`, `status`, timestamps    |
| `roles`                 | `id`, `name` (`user`, `admin`, `superadmin`), `guard_name` |
| `permissions`           | `id`, `name`, `guard_name`                                 |
| `model_has_roles`       | polymorphic relation for roles                             |
| `model_has_permissions` | polymorphic relation for permissions                       |
| `role_has_permissions`  | `role_id`, `permission_id`                                 |

> ✅ Uses [Spatie Laravel-Permission](mdc:https:/github.com/spatie/laravel-permission)

---

## 🧱 ARCHITECTURE & DIRECTORY STRUCTURE

```
app/
├── Http/
│   ├── Controllers/
│   │   ├── Auth/
│   │   ├── User/
│   │   ├── Admin/
│   │   └── Superadmin/
│   ├── Middleware/
│   └── Requests/
├── Models/
├── Providers/
routes/
├── web.php
├── admin.php
└── superadmin.php
resources/
├── views/
│   ├── auth/
│   ├── layouts/
│   ├── dashboard/
│   │   ├── user/
│   │   ├── admin/
│   │   └── superadmin/
```

---

## 🌐 ROUTING & MIDDLEWARE

### `web.php` (Users)

```php
Route::middleware(['auth', 'role:user'])->group(function () {
    Route::get('/dashboard', [UserDashboardController::class, 'index'])->name('user.dashboard');
});
```

### `admin.php`

```php
Route::prefix('admin')->middleware(['auth', 'role:admin'])->group(function () {
    Route::get('/dashboard', [AdminDashboardController::class, 'index'])->name('admin.dashboard');
    Route::resource('users', AdminUserController::class);
});
```

### `superadmin.php`

```php
Route::prefix('superadmin')->middleware(['auth', 'role:superadmin'])->group(function () {
    Route::get('/dashboard', [SuperAdminController::class, 'dashboard'])->name('superadmin.dashboard');
    Route::get('/system-health', [SuperAdminController::class, 'health']);
});
```

---

## 🛡️ CUSTOM MIDDLEWARE

**RoleMiddleware.php**

```php
public function handle($request, Closure $next, $role)
{
    if (!auth()->check() || !$request->user()->hasRole($role)) {
        abort(403, 'Access denied');
    }
    return $next($request);
}
```

---

## 🌱 SEEDERS

```php
public function run()
{
    $superadminRole = Role::create(['name' => 'superadmin']);
    $adminRole = Role::create(['name' => 'admin']);
    $userRole = Role::create(['name' => 'user']);

    $permissions = ['view dashboard', 'manage users', 'ban users'];

    foreach ($permissions as $permission) {
        Permission::create(['name' => $permission]);
    }

    $adminRole->givePermissionTo(['view dashboard', 'manage users']);
    $superadminRole->givePermissionTo(Permission::all());

    \App\Models\User::create([
        'name' => 'Super Admin',
        'email' => 'super@admin.com',
        'password' => bcrypt('password'),
    ])->assignRole('superadmin');
}
```

---

## 📈 DASHBOARDS

* **User Dashboard**

  * Task or project summary
  * Recent activity
  * Notifications

* **Admin Dashboard**

  * User management table
  * Team performance chart
  * Flagged items/content

* **Superadmin Dashboard**

  * Workspace/tenant list
  * System health (jobs, DB, disk)
  * Billing overview
  * Feature flag controls

---

## 📦 OPTIONAL MODULES

| Feature             | Package / Tech                                                          |
| ------------------- | ----------------------------------------------------------------------- |
| Audit Logs          | [owen-it/laravel-auditing](mdc:https:/github.com/owen-it/laravel-auditing) |
| File Uploads        | Laravel MediaLibrary                                                    |
| Background Jobs     | Laravel Queue (Redis or DB)                                             |
| Email Notifications | Laravel Notifications                                                   |
| 2FA                 | Laravel Fortify or custom TOTP                                          |
| Billing             | Laravel Cashier + Stripe                                                |
| API Access          | Laravel Sanctum or Passport                                             |
| WebSocket updates   | Laravel Echo + Pusher or Socket.IO                                      |
| Multi-tenancy       | [tenancy/tenancy](mdc:https:/tenancyforlaravel.com)                       |

---

## ⚙️ DEPLOYMENT-READY WITH

* `.env.example` with default configs
* MySQL/MariaDB as backend DB
* Supervisor config for queues
* Nginx + PHP-FPM ready config

---

## 🧪 TESTING & QA

* Feature tests for all dashboards
* Middleware tests (access restriction)
* Role & permission logic unit tests
* Seeder test (ensure correct defaults)
* End-to-end tests (optional with Laravel Dusk or Cypress)

---

## ✅ BENEFITS

* 🚀 **Ready to launch SaaS or business apps**
* 🧩 **Extensible with any modules (chat, AI, payments)**
* 🛡️ **Secure with modern best practices**
* 🎯 **Great developer experience**
* 📦 **Reusable boilerplate for every Laravel project**

---

## Front End should be ReactJs/NextJs
